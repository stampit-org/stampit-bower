{"version":3,"file":null,"sources":["../src/isObject.js","../src/isFunction.js","../src/extract-functions.js","../src/isPlainObject.js","../src/merge.js","../src/standardise-descriptor.js","../src/compose.js","../src/isStamp.js","../src/stampit.js"],"sourcesContent":["export default function isObject(obj) {\n  const type = typeof obj;\n  return !!obj && (type === 'object' || type === 'function');\n}\n","export default function isFunction(obj) {\n  return typeof obj === 'function';\n}\n","import isFunction from './isFunction';\n\nconst concat = Array.prototype.concat;\nexport default function () {\n  const fns = concat.apply([], arguments).filter(isFunction);\n  return fns.length === 0 ? undefined : fns;\n}\n","export default function isPlainObject(value) {\n  return !!value && typeof value === 'object' &&\n    Object.getPrototypeOf(value) === Object.prototype;\n}\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\n\n/**\n * The 'src' argument plays the command role.\n * The returned values is always of the same type as the 'src'.\n * @param dst\n * @param src\n * @returns {*}\n */\nfunction mergeOne(dst, src) {\n  if (src === undefined) return dst;\n\n  // According to specification arrays must be concatenated.\n  // Also, the '.concat' creates a new array instance. Overrides the 'dst'.\n  if (Array.isArray(src)) return (Array.isArray(dst) ? dst : []).concat(src);\n\n  // Now deal with non plain 'src' object. 'src' overrides 'dst'\n  // Note that functions are also assigned! We do not deep merge functions.\n  if (!isPlainObject(src)) return src;\n\n  // See if 'dst' is allowed to be mutated. If not - it's overridden with a new plain object.\n  const returnValue = isObject(dst) ? dst : {};\n\n  const keys = Object.keys(src);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n\n    const srcValue = src[key];\n    // Do not merge properties with the 'undefined' value.\n    if (srcValue !== undefined) {\n      const dstValue = returnValue[key];\n      // Recursive calls to mergeOne() must allow only plain objects or arrays in dst\n      const newDst = isPlainObject(dstValue) || Array.isArray(srcValue) ? dstValue : {};\n\n      // deep merge each property. Recursion!\n      returnValue[key] = mergeOne(newDst, srcValue);\n    }\n  }\n\n  return returnValue;\n}\n\nexport default function (dst, ...srcs) {\n  return srcs.reduce(mergeOne, dst);\n}\n","import isObject from './isObject';\nimport extractFunctions from './extract-functions';\nimport merge from './merge';\n\nconst assign = Object.assign;\n\n/**\n * Converts stampit extended descriptor to a standard one.\n * @param [methods]\n * @param [properties]\n * @param [props]\n * @param [refs]\n * @param [initializers]\n * @param [init]\n * @param [deepProperties]\n * @param [deepProps]\n * @param [propertyDescriptors]\n * @param [staticProperties]\n * @param [statics]\n * @param [staticDeepProperties]\n * @param [deepStatics]\n * @param [staticPropertyDescriptors]\n * @param [configuration]\n * @param [conf]\n * @param [deepConfiguration]\n * @param [deepConf]\n * @returns {Descriptor}\n */\nexport default function ({\n  methods,\n\n  properties,\n  props,\n  refs,\n\n  initializers,\n  init,\n\n  deepProperties,\n  deepProps,\n\n  propertyDescriptors,\n\n  staticProperties,\n  statics,\n\n  staticDeepProperties,\n  deepStatics,\n\n  staticPropertyDescriptors,\n\n  configuration,\n  conf,\n\n  deepConfiguration,\n  deepConf\n} = {}) {\n  const p = isObject(props) || isObject(refs) || isObject(properties) ?\n    assign({}, props, refs, properties) : undefined;\n\n  let dp = isObject(deepProps) ? merge({}, deepProps) : undefined;\n  dp = isObject(deepProperties) ? merge(dp, deepProperties) : dp;\n\n  const sp = isObject(statics) || isObject(staticProperties) ?\n    assign({}, statics, staticProperties) : undefined;\n\n  let dsp = isObject(deepStatics) ? merge({}, deepStatics) : undefined;\n  dsp = isObject(staticDeepProperties) ? merge(dsp, staticDeepProperties) : dsp;\n\n  const c = isObject(conf) || isObject(configuration) ?\n    assign({}, conf, configuration) : undefined;\n\n  let dc = isObject(deepConf) ? merge({}, deepConf) : undefined;\n  dc = isObject(deepConfiguration) ? merge(dc, deepConfiguration) : dc;\n\n  return {\n    methods,\n    properties: p,\n    initializers: extractFunctions(init, initializers),\n    deepProperties: dp,\n    staticProperties: sp,\n    staticDeepProperties: dsp,\n    propertyDescriptors,\n    staticPropertyDescriptors,\n    configuration: c,\n    deepConfiguration: dc\n  };\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\nimport isComposable from './isComposable';\nimport merge from './merge';\n\nconst assign = Object.assign;\n\n/**\n * Creates new factory instance.\n * @param {Descriptor} descriptor The information about the object the factory will be creating.\n * @returns {Function} The new factory function.\n */\nfunction createFactory(descriptor) {\n  return function Stamp(options, ...args) {\n    // Next line was optimized for most JS VMs. Please, be careful here!\n    const obj = Object.create(descriptor.methods || null);\n\n    merge(obj, descriptor.deepProperties);\n    assign(obj, descriptor.properties);\n    Object.defineProperties(obj, descriptor.propertyDescriptors || {});\n\n    if (!descriptor.initializers || descriptor.initializers.length === 0) return obj;\n\n    if (options === undefined) options = {};\n    return descriptor.initializers.filter(isFunction).reduce((resultingObj, initializer) => {\n      const returnedValue = initializer.call(resultingObj, options,\n        {instance: resultingObj, stamp: Stamp, args: [options].concat(args)});\n      return returnedValue === undefined ? resultingObj : returnedValue;\n    }, obj);\n  };\n}\n\n/**\n * Returns a new stamp given a descriptor and a compose function implementation.\n * @param {Descriptor} [descriptor={}] The information about the object the stamp will be creating.\n * @param {Compose} composeFunction The \"compose\" function implementation.\n * @returns {Stamp}\n */\nfunction createStamp(descriptor, composeFunction) {\n  const Stamp = createFactory(descriptor);\n\n  merge(Stamp, descriptor.staticDeepProperties);\n  assign(Stamp, descriptor.staticProperties);\n  Object.defineProperties(Stamp, descriptor.staticPropertyDescriptors || {});\n\n  const composeImplementation = isFunction(Stamp.compose) ? Stamp.compose : composeFunction;\n  Stamp.compose = function _compose(...args) {\n    return composeImplementation.apply(this, args);\n  };\n  assign(Stamp.compose, descriptor);\n\n  return Stamp;\n}\n\n/**\n * Mutates the dstDescriptor by merging the srcComposable data into it.\n * @param {Descriptor} dstDescriptor The descriptor object to merge into.\n * @param {Composable} [srcComposable] The composable\n * (either descriptor or stamp) to merge data form.\n * @returns {Descriptor} Returns the dstDescriptor argument.\n */\nfunction mergeComposable(dstDescriptor, srcComposable) {\n  const srcDescriptor = (srcComposable && srcComposable.compose) || srcComposable;\n  if (!isComposable(srcDescriptor)) return dstDescriptor;\n\n  const combineProperty = (propName, action) => {\n    if (!isObject(srcDescriptor[propName])) return;\n    if (!isObject(dstDescriptor[propName])) dstDescriptor[propName] = {};\n    action(dstDescriptor[propName], srcDescriptor[propName]);\n  };\n\n  combineProperty('methods', assign);\n  combineProperty('properties', assign);\n  combineProperty('deepProperties', merge);\n  combineProperty('propertyDescriptors', assign);\n  combineProperty('staticProperties', assign);\n  combineProperty('staticDeepProperties', merge);\n  combineProperty('staticPropertyDescriptors', assign);\n  combineProperty('configuration', assign);\n  combineProperty('deepConfiguration', merge);\n  if (Array.isArray(srcDescriptor.initializers)) {\n    dstDescriptor.initializers = srcDescriptor.initializers.reduce((result, init) => {\n      if (isFunction(init) && result.indexOf(init) < 0) {\n        result.push(init);\n      }\n      return result;\n    }, Array.isArray(dstDescriptor.initializers) ? dstDescriptor.initializers : []);\n  }\n\n  return dstDescriptor;\n}\n\n/**\n * Given the list of composables (stamp descriptors and stamps) returns\n * a new stamp (composable factory function).\n * @typedef {Function} Compose\n * @param {...(Composable)} [composables] The list of composables.\n * @returns {Stamp} A new stamp (aka composable factory function)\n */\nexport default function compose(...composables) {\n  const descriptor = [this]\n    .concat(composables)\n    .filter(isObject)\n    .reduce(mergeComposable, {});\n  return createStamp(descriptor, compose);\n}\n\n\n/**\n * The Stamp Descriptor\n * @typedef {Function|Object} Descriptor\n * @returns {Stamp} A new stamp based on this Stamp\n * @property {Object} [methods] Methods or other data used as object instances' prototype\n * @property {Array<Function>} [initializers] List of initializers called for each object instance\n * @property {Object} [properties] Shallow assigned properties of object instances\n * @property {Object} [deepProperties] Deeply merged properties of object instances\n * @property {Object} [staticProperties] Shallow assigned properties of Stamps\n * @property {Object} [staticDeepProperties] Deeply merged properties of Stamps\n * @property {Object} [configuration] Shallow assigned properties of Stamp arbitrary metadata\n * @property {Object} [deepConfiguration] Deeply merged properties of Stamp arbitrary metadata\n * @property {Object} [propertyDescriptors] ES5 Property Descriptors applied to object instances\n * @property {Object} [staticPropertyDescriptors] ES5 Property Descriptors applied to Stamps\n */\n\n/**\n * The Stamp factory function\n * @typedef {Function} Stamp\n * @returns {*} Instantiated object\n * @property {Descriptor} compose - The Stamp descriptor and composition function\n */\n\n/**\n * A composable object - stamp or descriptor\n * @typedef {Stamp|Descriptor} Composable\n */\n\n","import isFunction from './isFunction';\n\n/**\n * Returns true if argument is a stamp.\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isStamp(obj) {\n  return isFunction(obj) && isFunction(obj.compose);\n}\n","import standardiseDescriptor from './standardise-descriptor';\nimport extractFunctions from './extract-functions';\nimport merge from './merge';\nimport compose from './compose';\nimport isComposable from './isComposable';\nimport isStamp from './isStamp';\n\nconst assign = Object.assign;\n\nfunction createUtilityFunction(propName, action) {\n  return function composeUtil() {\n    const descriptor = {};\n    descriptor[propName] = action({}, ...arguments);\n    return ((this && this.compose) || stampit).call(this, descriptor);\n  };\n}\n\nexport const methods = createUtilityFunction('methods', assign);\n\nexport const properties = createUtilityFunction('properties', assign);\nexport {properties as refs};\nexport {properties as props};\n\nexport function initializers(...args) {\n  return ((this && this.compose) || stampit).call(this, {\n    initializers: extractFunctions(...args)\n  });\n}\nexport {initializers as init};\n\nexport const deepProperties = createUtilityFunction('deepProperties', merge);\nexport {deepProperties as deepProps};\n\nexport const staticProperties = createUtilityFunction('staticProperties', assign);\nexport {staticProperties as statics};\n\nexport const staticDeepProperties = createUtilityFunction('staticDeepProperties', merge);\nexport {staticDeepProperties as deepStatics};\n\nexport const configuration = createUtilityFunction('configuration', assign);\nexport {configuration as conf};\n\nexport const deepConfiguration = createUtilityFunction('deepConfiguration', merge);\nexport {deepConfiguration as deepConf};\n\nexport const propertyDescriptors = createUtilityFunction('propertyDescriptors', assign);\n\nexport const staticPropertyDescriptors = createUtilityFunction('staticPropertyDescriptors', assign);\n\nconst allUtilities = {\n  methods,\n\n  properties,\n  refs: properties,\n  props: properties,\n\n  initializers,\n  init: initializers,\n\n  deepProperties,\n  deepProps: deepProperties,\n\n  staticProperties,\n  statics: staticProperties,\n\n  staticDeepProperties,\n  deepStatics: staticDeepProperties,\n\n  configuration,\n  conf: configuration,\n\n  deepConfiguration,\n  deepConf: deepConfiguration,\n\n  propertyDescriptors,\n\n  staticPropertyDescriptors\n};\n\n/**\n * Infected stamp. Used as a storage of the infection metadata\n * @type {Function}\n * @return {Stamp}\n */\nconst baseStampit = compose(\n  {staticProperties: allUtilities},\n  {\n    staticProperties: {\n      create(...args) {\n        return this(...args);\n      },\n      compose: stampit // infecting\n    }\n  }\n);\n\n/**\n * Infected compose\n * @param {...(Composable)} [args] The list of composables.\n * @return {Stamp}\n */\nfunction stampit(...args) {\n  args = args.filter(isComposable)\n    .map(arg => isStamp(arg) ? arg : standardiseDescriptor(arg));\n\n  // Calling the standard pure compose function here.\n  return compose.apply(this || baseStampit, args);\n}\n\nconst exportedCompose = stampit.bind(); // bind to 'undefined'\nexport {exportedCompose as compose};\nstampit.compose = exportedCompose;\n\n// Setting up the shortcut functions\nexport default assign(stampit, allUtilities);\n"],"names":["const","let","assign","isComposable"],"mappings":"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"}